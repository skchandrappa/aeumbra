"""Initial migration

Revision ID: 72db628bfbc7
Revises: 
Create Date: 2025-10-22 14:50:49.891903

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '72db628bfbc7'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('app_settings', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('app_settings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('app_settings_setting_key_key'), 'app_settings', type_='unique')
    op.create_index(op.f('ix_app_settings_id'), 'app_settings', ['id'], unique=False)
    op.create_index(op.f('ix_app_settings_setting_key'), 'app_settings', ['setting_key'], unique=True)
    op.drop_constraint(op.f('app_settings_updated_by_fkey'), 'app_settings', type_='foreignkey')
    op.add_column('background_checks', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('background_checks', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('background_checks', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('background_checks', 'result_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('background_checks', 'initiated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('background_checks', 'completed_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('background_checks', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.create_index(op.f('ix_background_checks_id'), 'background_checks', ['id'], unique=False)
    op.create_index(op.f('ix_background_checks_user_id'), 'background_checks', ['user_id'], unique=False)
    op.drop_constraint(op.f('background_checks_user_id_fkey'), 'background_checks', type_='foreignkey')
    op.add_column('booking_status_history', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('booking_status_history', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('booking_status_history', 'booking_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_index(op.f('ix_booking_status_history_booking_id'), 'booking_status_history', ['booking_id'], unique=False)
    op.create_index(op.f('ix_booking_status_history_id'), 'booking_status_history', ['id'], unique=False)
    op.drop_constraint(op.f('booking_status_history_booking_id_fkey'), 'booking_status_history', type_='foreignkey')
    op.drop_constraint(op.f('booking_status_history_changed_by_fkey'), 'booking_status_history', type_='foreignkey')
    op.drop_column('booking_status_history', 'changed_at')
    op.add_column('bookings', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('bookings', 'guard_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('bookings', 'consumer_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('bookings', 'event_type_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('bookings', 'start_datetime',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('bookings', 'end_datetime',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('bookings', 'confirmed_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('bookings', 'started_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('bookings', 'completed_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('bookings', 'cancelled_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('bookings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('bookings_booking_reference_key'), 'bookings', type_='unique')
    op.drop_index(op.f('idx_bookings_consumer_id'), table_name='bookings')
    op.drop_index(op.f('idx_bookings_datetime'), table_name='bookings')
    op.drop_index(op.f('idx_bookings_guard_id'), table_name='bookings')
    op.drop_index(op.f('idx_bookings_location'), table_name='bookings')
    op.drop_index(op.f('idx_bookings_status'), table_name='bookings')
    op.create_index(op.f('ix_bookings_booking_reference'), 'bookings', ['booking_reference'], unique=True)
    op.create_index(op.f('ix_bookings_consumer_id'), 'bookings', ['consumer_id'], unique=False)
    op.create_index(op.f('ix_bookings_event_type_id'), 'bookings', ['event_type_id'], unique=False)
    op.create_index(op.f('ix_bookings_guard_id'), 'bookings', ['guard_id'], unique=False)
    op.create_index(op.f('ix_bookings_id'), 'bookings', ['id'], unique=False)
    op.drop_constraint(op.f('bookings_event_type_id_fkey'), 'bookings', type_='foreignkey')
    op.drop_constraint(op.f('bookings_consumer_id_fkey'), 'bookings', type_='foreignkey')
    op.drop_constraint(op.f('bookings_cancelled_by_fkey'), 'bookings', type_='foreignkey')
    op.drop_constraint(op.f('bookings_guard_id_fkey'), 'bookings', type_='foreignkey')
    op.drop_table_comment(
        'bookings',
        existing_comment='Main booking system for guard assignments',
        schema=None
    )
    op.add_column('comment_likes', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('comment_likes', 'comment_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('comment_likes', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('comment_likes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('comment_likes_comment_id_user_id_key'), 'comment_likes', type_='unique')
    op.create_index(op.f('ix_comment_likes_comment_id'), 'comment_likes', ['comment_id'], unique=False)
    op.create_index(op.f('ix_comment_likes_id'), 'comment_likes', ['id'], unique=False)
    op.create_index(op.f('ix_comment_likes_user_id'), 'comment_likes', ['user_id'], unique=False)
    op.create_unique_constraint('uq_comment_like', 'comment_likes', ['comment_id', 'user_id'])
    op.drop_constraint(op.f('comment_likes_comment_id_fkey'), 'comment_likes', type_='foreignkey')
    op.drop_constraint(op.f('comment_likes_user_id_fkey'), 'comment_likes', type_='foreignkey')
    op.add_column('complaint_categories', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('complaint_categories', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.create_index(op.f('ix_complaint_categories_id'), 'complaint_categories', ['id'], unique=False)
    op.add_column('complaint_updates', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('complaint_updates', 'complaint_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('complaint_updates', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('complaint_updates', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_complaint_updates_complaint_id'), 'complaint_updates', ['complaint_id'], unique=False)
    op.create_index(op.f('ix_complaint_updates_id'), 'complaint_updates', ['id'], unique=False)
    op.create_index(op.f('ix_complaint_updates_user_id'), 'complaint_updates', ['user_id'], unique=False)
    op.drop_constraint(op.f('complaint_updates_user_id_fkey'), 'complaint_updates', type_='foreignkey')
    op.drop_constraint(op.f('complaint_updates_complaint_id_fkey'), 'complaint_updates', type_='foreignkey')
    op.alter_column('complaints', 'complainant_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('complaints', 'defendant_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('complaints', 'category_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('complaints', 'resolved_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('complaints', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('complaints', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('complaints_complaint_reference_key'), 'complaints', type_='unique')
    op.create_index(op.f('ix_complaints_booking_id'), 'complaints', ['booking_id'], unique=False)
    op.create_index(op.f('ix_complaints_category_id'), 'complaints', ['category_id'], unique=False)
    op.create_index(op.f('ix_complaints_complainant_id'), 'complaints', ['complainant_id'], unique=False)
    op.create_index(op.f('ix_complaints_complaint_reference'), 'complaints', ['complaint_reference'], unique=True)
    op.create_index(op.f('ix_complaints_defendant_id'), 'complaints', ['defendant_id'], unique=False)
    op.create_index(op.f('ix_complaints_id'), 'complaints', ['id'], unique=False)
    op.drop_constraint(op.f('complaints_booking_id_fkey'), 'complaints', type_='foreignkey')
    op.drop_constraint(op.f('complaints_category_id_fkey'), 'complaints', type_='foreignkey')
    op.drop_constraint(op.f('complaints_defendant_id_fkey'), 'complaints', type_='foreignkey')
    op.drop_constraint(op.f('complaints_resolved_by_fkey'), 'complaints', type_='foreignkey')
    op.drop_constraint(op.f('complaints_complainant_id_fkey'), 'complaints', type_='foreignkey')
    op.drop_table_comment(
        'complaints',
        existing_comment='Complaint and dispute resolution system',
        schema=None
    )
    op.add_column('event_types', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('event_types', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_event_types_id'), 'event_types', ['id'], unique=False)
    op.alter_column('guard_pricing', 'guard_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('guard_pricing', 'pricing_zone_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('guard_pricing', 'available_from',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('guard_pricing', 'available_until',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('guard_pricing', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('guard_pricing', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('guard_pricing_guard_id_pricing_zone_id_key'), 'guard_pricing', type_='unique')
    op.create_index(op.f('ix_guard_pricing_guard_id'), 'guard_pricing', ['guard_id'], unique=False)
    op.create_index(op.f('ix_guard_pricing_id'), 'guard_pricing', ['id'], unique=False)
    op.create_index(op.f('ix_guard_pricing_pricing_zone_id'), 'guard_pricing', ['pricing_zone_id'], unique=False)
    op.create_unique_constraint('uq_guard_pricing', 'guard_pricing', ['guard_id', 'pricing_zone_id'])
    op.drop_constraint(op.f('guard_pricing_guard_id_fkey'), 'guard_pricing', type_='foreignkey')
    op.drop_constraint(op.f('guard_pricing_pricing_zone_id_fkey'), 'guard_pricing', type_='foreignkey')
    op.add_column('notification_types', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('notification_types', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.create_index(op.f('ix_notification_types_id'), 'notification_types', ['id'], unique=False)
    op.add_column('notifications', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('notifications', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('notifications', 'type_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('notifications', 'data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('notifications', 'read_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('notifications', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_notifications_unread'), table_name='notifications', postgresql_where='(is_read = false)')
    op.drop_index(op.f('idx_notifications_user_id'), table_name='notifications')
    op.create_index(op.f('ix_notifications_id'), 'notifications', ['id'], unique=False)
    op.create_index(op.f('ix_notifications_type_id'), 'notifications', ['type_id'], unique=False)
    op.create_index(op.f('ix_notifications_user_id'), 'notifications', ['user_id'], unique=False)
    op.drop_constraint(op.f('notifications_type_id_fkey'), 'notifications', type_='foreignkey')
    op.drop_constraint(op.f('notifications_user_id_fkey'), 'notifications', type_='foreignkey')
    op.alter_column('payment_methods', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('payment_methods', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('payment_methods', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_payment_methods_id'), 'payment_methods', ['id'], unique=False)
    op.create_index(op.f('ix_payment_methods_user_id'), 'payment_methods', ['user_id'], unique=False)
    op.drop_constraint(op.f('payment_methods_user_id_fkey'), 'payment_methods', type_='foreignkey')
    op.alter_column('post_comments', 'post_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('post_comments', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('post_comments', 'edited_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('post_comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('post_comments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_post_comments_id'), 'post_comments', ['id'], unique=False)
    op.create_index(op.f('ix_post_comments_parent_comment_id'), 'post_comments', ['parent_comment_id'], unique=False)
    op.create_index(op.f('ix_post_comments_post_id'), 'post_comments', ['post_id'], unique=False)
    op.create_index(op.f('ix_post_comments_user_id'), 'post_comments', ['user_id'], unique=False)
    op.drop_constraint(op.f('post_comments_user_id_fkey'), 'post_comments', type_='foreignkey')
    op.drop_constraint(op.f('post_comments_post_id_fkey'), 'post_comments', type_='foreignkey')
    op.drop_constraint(op.f('post_comments_parent_comment_id_fkey'), 'post_comments', type_='foreignkey')
    op.add_column('post_likes', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('post_likes', 'post_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('post_likes', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('post_likes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('post_likes_post_id_user_id_key'), 'post_likes', type_='unique')
    op.create_index(op.f('ix_post_likes_id'), 'post_likes', ['id'], unique=False)
    op.create_index(op.f('ix_post_likes_post_id'), 'post_likes', ['post_id'], unique=False)
    op.create_index(op.f('ix_post_likes_user_id'), 'post_likes', ['user_id'], unique=False)
    op.create_unique_constraint('uq_post_like', 'post_likes', ['post_id', 'user_id'])
    op.drop_constraint(op.f('post_likes_post_id_fkey'), 'post_likes', type_='foreignkey')
    op.drop_constraint(op.f('post_likes_user_id_fkey'), 'post_likes', type_='foreignkey')
    op.add_column('post_media', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('post_media', 'post_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('post_media', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_post_media_id'), 'post_media', ['id'], unique=False)
    op.create_index(op.f('ix_post_media_post_id'), 'post_media', ['post_id'], unique=False)
    op.drop_constraint(op.f('post_media_post_id_fkey'), 'post_media', type_='foreignkey')
    op.alter_column('posts', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('posts', 'moderated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('posts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_posts_created_at'), table_name='posts')
    op.drop_index(op.f('idx_posts_location'), table_name='posts')
    op.drop_index(op.f('idx_posts_user_id'), table_name='posts')
    op.drop_index(op.f('idx_posts_visibility'), table_name='posts')
    op.create_index(op.f('ix_posts_id'), 'posts', ['id'], unique=False)
    op.create_index(op.f('ix_posts_user_id'), 'posts', ['user_id'], unique=False)
    op.drop_constraint(op.f('posts_moderated_by_fkey'), 'posts', type_='foreignkey')
    op.drop_constraint(op.f('posts_user_id_fkey'), 'posts', type_='foreignkey')
    op.drop_table_comment(
        'posts',
        existing_comment='Social media style posts for guards to share updates',
        schema=None
    )
    op.add_column('pricing_factors', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('pricing_factors', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_pricing_factors_id'), 'pricing_factors', ['id'], unique=False)
    op.add_column('pricing_zones', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('pricing_zones', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_pricing_zones_id'), 'pricing_zones', ['id'], unique=False)
    op.alter_column('profiles', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('profiles', 'full_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('profiles', 'certifications',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('profiles', 'languages_spoken',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('profiles', 'availability_schedule',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_profiles_location'), table_name='profiles')
    op.drop_index(op.f('idx_profiles_status'), table_name='profiles')
    op.drop_index(op.f('idx_profiles_user_type'), table_name='profiles')
    op.drop_constraint(op.f('profiles_user_id_key'), 'profiles', type_='unique')
    op.create_index(op.f('ix_profiles_id'), 'profiles', ['id'], unique=False)
    op.create_index(op.f('ix_profiles_user_id'), 'profiles', ['user_id'], unique=True)
    op.drop_constraint(op.f('profiles_user_id_fkey'), 'profiles', type_='foreignkey')
    op.drop_table_comment(
        'profiles',
        existing_comment='Extended user profile information with demographics and location',
        schema=None
    )
    op.alter_column('review_responses', 'review_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('review_responses', 'responder_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('review_responses', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('review_responses', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_review_responses_id'), 'review_responses', ['id'], unique=False)
    op.create_index(op.f('ix_review_responses_responder_id'), 'review_responses', ['responder_id'], unique=False)
    op.create_index(op.f('ix_review_responses_review_id'), 'review_responses', ['review_id'], unique=False)
    op.drop_constraint(op.f('review_responses_review_id_fkey'), 'review_responses', type_='foreignkey')
    op.drop_constraint(op.f('review_responses_responder_id_fkey'), 'review_responses', type_='foreignkey')
    op.add_column('review_votes', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('review_votes', 'review_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('review_votes', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('review_votes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('review_votes_review_id_user_id_key'), 'review_votes', type_='unique')
    op.create_index(op.f('ix_review_votes_id'), 'review_votes', ['id'], unique=False)
    op.create_index(op.f('ix_review_votes_review_id'), 'review_votes', ['review_id'], unique=False)
    op.create_index(op.f('ix_review_votes_user_id'), 'review_votes', ['user_id'], unique=False)
    op.create_unique_constraint('uq_review_vote', 'review_votes', ['review_id', 'user_id'])
    op.drop_constraint(op.f('review_votes_review_id_fkey'), 'review_votes', type_='foreignkey')
    op.drop_constraint(op.f('review_votes_user_id_fkey'), 'review_votes', type_='foreignkey')
    op.alter_column('reviews', 'reviewer_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('reviews', 'reviewed_user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('reviews', 'moderated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('reviews', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('reviews', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_reviews_booking_id'), table_name='reviews')
    op.drop_index(op.f('idx_reviews_rating'), table_name='reviews')
    op.drop_index(op.f('idx_reviews_reviewed_user_id'), table_name='reviews')
    op.drop_constraint(op.f('reviews_reviewer_id_booking_id_key'), 'reviews', type_='unique')
    op.create_index(op.f('ix_reviews_booking_id'), 'reviews', ['booking_id'], unique=False)
    op.create_index(op.f('ix_reviews_id'), 'reviews', ['id'], unique=False)
    op.create_index(op.f('ix_reviews_reviewed_user_id'), 'reviews', ['reviewed_user_id'], unique=False)
    op.create_index(op.f('ix_reviews_reviewer_id'), 'reviews', ['reviewer_id'], unique=False)
    op.create_unique_constraint('uq_review_booking', 'reviews', ['reviewer_id', 'booking_id'])
    op.drop_constraint(op.f('reviews_moderated_by_fkey'), 'reviews', type_='foreignkey')
    op.drop_constraint(op.f('reviews_booking_id_fkey'), 'reviews', type_='foreignkey')
    op.drop_constraint(op.f('reviews_reviewer_id_fkey'), 'reviews', type_='foreignkey')
    op.drop_constraint(op.f('reviews_reviewed_user_id_fkey'), 'reviews', type_='foreignkey')
    op.drop_table_comment(
        'reviews',
        existing_comment='User review and rating system',
        schema=None
    )
    op.add_column('transaction_status_history', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('transaction_status_history', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('transaction_status_history', 'transaction_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_index(op.f('ix_transaction_status_history_id'), 'transaction_status_history', ['id'], unique=False)
    op.create_index(op.f('ix_transaction_status_history_transaction_id'), 'transaction_status_history', ['transaction_id'], unique=False)
    op.drop_constraint(op.f('transaction_status_history_transaction_id_fkey'), 'transaction_status_history', type_='foreignkey')
    op.drop_constraint(op.f('transaction_status_history_changed_by_fkey'), 'transaction_status_history', type_='foreignkey')
    op.drop_column('transaction_status_history', 'changed_at')
    op.add_column('transactions', sa.Column('transaction_metadata', sa.JSON(), nullable=True))
    op.alter_column('transactions', 'payer_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('transactions', 'payee_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('transactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('transactions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_transactions_booking_id'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_created_at'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_payee_id'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_payer_id'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_status'), table_name='transactions')
    op.drop_constraint(op.f('transactions_transaction_reference_key'), 'transactions', type_='unique')
    op.create_index(op.f('ix_transactions_booking_id'), 'transactions', ['booking_id'], unique=False)
    op.create_index(op.f('ix_transactions_id'), 'transactions', ['id'], unique=False)
    op.create_index(op.f('ix_transactions_payee_id'), 'transactions', ['payee_id'], unique=False)
    op.create_index(op.f('ix_transactions_payer_id'), 'transactions', ['payer_id'], unique=False)
    op.create_index(op.f('ix_transactions_payment_method_id'), 'transactions', ['payment_method_id'], unique=False)
    op.create_index(op.f('ix_transactions_transaction_reference'), 'transactions', ['transaction_reference'], unique=True)
    op.drop_constraint(op.f('transactions_booking_id_fkey'), 'transactions', type_='foreignkey')
    op.drop_constraint(op.f('transactions_payment_method_id_fkey'), 'transactions', type_='foreignkey')
    op.drop_constraint(op.f('transactions_payer_id_fkey'), 'transactions', type_='foreignkey')
    op.drop_constraint(op.f('transactions_payee_id_fkey'), 'transactions', type_='foreignkey')
    op.drop_constraint(op.f('transactions_initiated_by_fkey'), 'transactions', type_='foreignkey')
    op.drop_table_comment(
        'transactions',
        existing_comment='Payment and financial transaction records',
        schema=None
    )
    op.drop_column('transactions', 'metadata')
    op.add_column('user_follows', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('user_follows', 'follower_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('user_follows', 'following_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('user_follows', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('user_follows_follower_id_following_id_key'), 'user_follows', type_='unique')
    op.create_index(op.f('ix_user_follows_follower_id'), 'user_follows', ['follower_id'], unique=False)
    op.create_index(op.f('ix_user_follows_following_id'), 'user_follows', ['following_id'], unique=False)
    op.create_index(op.f('ix_user_follows_id'), 'user_follows', ['id'], unique=False)
    op.create_unique_constraint('uq_user_follow', 'user_follows', ['follower_id', 'following_id'])
    op.drop_constraint(op.f('user_follows_follower_id_fkey'), 'user_follows', type_='foreignkey')
    op.drop_constraint(op.f('user_follows_following_id_fkey'), 'user_follows', type_='foreignkey')
    op.alter_column('user_settings', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('user_settings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_settings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('user_settings_user_id_key'), 'user_settings', type_='unique')
    op.create_index(op.f('ix_user_settings_id'), 'user_settings', ['id'], unique=False)
    op.create_index(op.f('ix_user_settings_user_id'), 'user_settings', ['user_id'], unique=True)
    op.drop_constraint(op.f('user_settings_user_id_fkey'), 'user_settings', type_='foreignkey')
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_users_active'), table_name='users')
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_index(op.f('idx_users_phone'), table_name='users')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_phone_number_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_phone_number'), 'users', ['phone_number'], unique=True)
    op.drop_table_comment(
        'users',
        existing_comment='Core user authentication table',
        schema=None
    )
    op.add_column('verification_document_types', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('verification_document_types', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.create_index(op.f('ix_verification_document_types_id'), 'verification_document_types', ['id'], unique=False)
    op.add_column('verifications', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('verifications', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('verifications', 'document_type_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('verifications', 'verified_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('verifications', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('verifications', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_verifications_document_type_id'), 'verifications', ['document_type_id'], unique=False)
    op.create_index(op.f('ix_verifications_id'), 'verifications', ['id'], unique=False)
    op.create_index(op.f('ix_verifications_user_id'), 'verifications', ['user_id'], unique=False)
    op.drop_constraint(op.f('verifications_verified_by_fkey'), 'verifications', type_='foreignkey')
    op.drop_constraint(op.f('verifications_user_id_fkey'), 'verifications', type_='foreignkey')
    op.drop_constraint(op.f('verifications_document_type_id_fkey'), 'verifications', type_='foreignkey')
    op.drop_column('verifications', 'submitted_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('verifications', sa.Column('submitted_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('verifications_document_type_id_fkey'), 'verifications', 'verification_document_types', ['document_type_id'], ['id'])
    op.create_foreign_key(op.f('verifications_user_id_fkey'), 'verifications', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('verifications_verified_by_fkey'), 'verifications', 'users', ['verified_by'], ['id'])
    op.drop_index(op.f('ix_verifications_user_id'), table_name='verifications')
    op.drop_index(op.f('ix_verifications_id'), table_name='verifications')
    op.drop_index(op.f('ix_verifications_document_type_id'), table_name='verifications')
    op.alter_column('verifications', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('verifications', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('verifications', 'verified_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('verifications', 'document_type_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('verifications', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('verifications', 'created_at')
    op.drop_index(op.f('ix_verification_document_types_id'), table_name='verification_document_types')
    op.drop_column('verification_document_types', 'updated_at')
    op.drop_column('verification_document_types', 'created_at')
    op.create_table_comment(
        'users',
        'Core user authentication table',
        existing_comment=None,
        schema=None
    )
    op.drop_index(op.f('ix_users_phone_number'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_phone_number_key'), 'users', ['phone_number'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_users_phone'), 'users', ['phone_number'], unique=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('idx_users_active'), 'users', ['is_active'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.create_foreign_key(op.f('user_settings_user_id_fkey'), 'user_settings', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_user_settings_user_id'), table_name='user_settings')
    op.drop_index(op.f('ix_user_settings_id'), table_name='user_settings')
    op.create_unique_constraint(op.f('user_settings_user_id_key'), 'user_settings', ['user_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('user_settings', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_settings', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_settings', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_foreign_key(op.f('user_follows_following_id_fkey'), 'user_follows', 'users', ['following_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('user_follows_follower_id_fkey'), 'user_follows', 'users', ['follower_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('uq_user_follow', 'user_follows', type_='unique')
    op.drop_index(op.f('ix_user_follows_id'), table_name='user_follows')
    op.drop_index(op.f('ix_user_follows_following_id'), table_name='user_follows')
    op.drop_index(op.f('ix_user_follows_follower_id'), table_name='user_follows')
    op.create_unique_constraint(op.f('user_follows_follower_id_following_id_key'), 'user_follows', ['follower_id', 'following_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('user_follows', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_follows', 'following_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('user_follows', 'follower_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('user_follows', 'updated_at')
    op.add_column('transactions', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_table_comment(
        'transactions',
        'Payment and financial transaction records',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('transactions_initiated_by_fkey'), 'transactions', 'users', ['initiated_by'], ['id'])
    op.create_foreign_key(op.f('transactions_payee_id_fkey'), 'transactions', 'users', ['payee_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('transactions_payer_id_fkey'), 'transactions', 'users', ['payer_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('transactions_payment_method_id_fkey'), 'transactions', 'payment_methods', ['payment_method_id'], ['id'])
    op.create_foreign_key(op.f('transactions_booking_id_fkey'), 'transactions', 'bookings', ['booking_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_transactions_transaction_reference'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_payment_method_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_payer_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_payee_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_booking_id'), table_name='transactions')
    op.create_unique_constraint(op.f('transactions_transaction_reference_key'), 'transactions', ['transaction_reference'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_transactions_status'), 'transactions', ['status'], unique=False)
    op.create_index(op.f('idx_transactions_payer_id'), 'transactions', ['payer_id'], unique=False)
    op.create_index(op.f('idx_transactions_payee_id'), 'transactions', ['payee_id'], unique=False)
    op.create_index(op.f('idx_transactions_created_at'), 'transactions', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_transactions_booking_id'), 'transactions', ['booking_id'], unique=False)
    op.alter_column('transactions', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('transactions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('transactions', 'payee_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('transactions', 'payer_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('transactions', 'transaction_metadata')
    op.add_column('transaction_status_history', sa.Column('changed_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('transaction_status_history_changed_by_fkey'), 'transaction_status_history', 'users', ['changed_by'], ['id'])
    op.create_foreign_key(op.f('transaction_status_history_transaction_id_fkey'), 'transaction_status_history', 'transactions', ['transaction_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_transaction_status_history_transaction_id'), table_name='transaction_status_history')
    op.drop_index(op.f('ix_transaction_status_history_id'), table_name='transaction_status_history')
    op.alter_column('transaction_status_history', 'transaction_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('transaction_status_history', 'updated_at')
    op.drop_column('transaction_status_history', 'created_at')
    op.create_table_comment(
        'reviews',
        'User review and rating system',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('reviews_reviewed_user_id_fkey'), 'reviews', 'users', ['reviewed_user_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('reviews_reviewer_id_fkey'), 'reviews', 'users', ['reviewer_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('reviews_booking_id_fkey'), 'reviews', 'bookings', ['booking_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('reviews_moderated_by_fkey'), 'reviews', 'users', ['moderated_by'], ['id'])
    op.drop_constraint('uq_review_booking', 'reviews', type_='unique')
    op.drop_index(op.f('ix_reviews_reviewer_id'), table_name='reviews')
    op.drop_index(op.f('ix_reviews_reviewed_user_id'), table_name='reviews')
    op.drop_index(op.f('ix_reviews_id'), table_name='reviews')
    op.drop_index(op.f('ix_reviews_booking_id'), table_name='reviews')
    op.create_unique_constraint(op.f('reviews_reviewer_id_booking_id_key'), 'reviews', ['reviewer_id', 'booking_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_reviews_reviewed_user_id'), 'reviews', ['reviewed_user_id'], unique=False)
    op.create_index(op.f('idx_reviews_rating'), 'reviews', ['overall_rating'], unique=False)
    op.create_index(op.f('idx_reviews_booking_id'), 'reviews', ['booking_id'], unique=False)
    op.alter_column('reviews', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('reviews', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('reviews', 'moderated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('reviews', 'reviewed_user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('reviews', 'reviewer_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_foreign_key(op.f('review_votes_user_id_fkey'), 'review_votes', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('review_votes_review_id_fkey'), 'review_votes', 'reviews', ['review_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('uq_review_vote', 'review_votes', type_='unique')
    op.drop_index(op.f('ix_review_votes_user_id'), table_name='review_votes')
    op.drop_index(op.f('ix_review_votes_review_id'), table_name='review_votes')
    op.drop_index(op.f('ix_review_votes_id'), table_name='review_votes')
    op.create_unique_constraint(op.f('review_votes_review_id_user_id_key'), 'review_votes', ['review_id', 'user_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('review_votes', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('review_votes', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('review_votes', 'review_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('review_votes', 'updated_at')
    op.create_foreign_key(op.f('review_responses_responder_id_fkey'), 'review_responses', 'users', ['responder_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('review_responses_review_id_fkey'), 'review_responses', 'reviews', ['review_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_review_responses_review_id'), table_name='review_responses')
    op.drop_index(op.f('ix_review_responses_responder_id'), table_name='review_responses')
    op.drop_index(op.f('ix_review_responses_id'), table_name='review_responses')
    op.alter_column('review_responses', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('review_responses', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('review_responses', 'responder_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('review_responses', 'review_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table_comment(
        'profiles',
        'Extended user profile information with demographics and location',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('profiles_user_id_fkey'), 'profiles', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_profiles_user_id'), table_name='profiles')
    op.drop_index(op.f('ix_profiles_id'), table_name='profiles')
    op.create_unique_constraint(op.f('profiles_user_id_key'), 'profiles', ['user_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_profiles_user_type'), 'profiles', ['user_type'], unique=False)
    op.create_index(op.f('idx_profiles_status'), 'profiles', ['status'], unique=False)
    op.create_index(op.f('idx_profiles_location'), 'profiles', ['latitude', 'longitude'], unique=False)
    op.alter_column('profiles', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('profiles', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('profiles', 'availability_schedule',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('profiles', 'languages_spoken',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('profiles', 'certifications',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('profiles', 'full_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('profiles', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index(op.f('ix_pricing_zones_id'), table_name='pricing_zones')
    op.alter_column('pricing_zones', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_column('pricing_zones', 'updated_at')
    op.drop_index(op.f('ix_pricing_factors_id'), table_name='pricing_factors')
    op.alter_column('pricing_factors', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_column('pricing_factors', 'updated_at')
    op.create_table_comment(
        'posts',
        'Social media style posts for guards to share updates',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('posts_user_id_fkey'), 'posts', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('posts_moderated_by_fkey'), 'posts', 'users', ['moderated_by'], ['id'])
    op.drop_index(op.f('ix_posts_user_id'), table_name='posts')
    op.drop_index(op.f('ix_posts_id'), table_name='posts')
    op.create_index(op.f('idx_posts_visibility'), 'posts', ['visibility'], unique=False)
    op.create_index(op.f('idx_posts_user_id'), 'posts', ['user_id'], unique=False)
    op.create_index(op.f('idx_posts_location'), 'posts', ['latitude', 'longitude'], unique=False)
    op.create_index(op.f('idx_posts_created_at'), 'posts', [sa.literal_column('created_at DESC')], unique=False)
    op.alter_column('posts', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('posts', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('posts', 'moderated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('posts', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_foreign_key(op.f('post_media_post_id_fkey'), 'post_media', 'posts', ['post_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_post_media_post_id'), table_name='post_media')
    op.drop_index(op.f('ix_post_media_id'), table_name='post_media')
    op.alter_column('post_media', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('post_media', 'post_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('post_media', 'updated_at')
    op.create_foreign_key(op.f('post_likes_user_id_fkey'), 'post_likes', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('post_likes_post_id_fkey'), 'post_likes', 'posts', ['post_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('uq_post_like', 'post_likes', type_='unique')
    op.drop_index(op.f('ix_post_likes_user_id'), table_name='post_likes')
    op.drop_index(op.f('ix_post_likes_post_id'), table_name='post_likes')
    op.drop_index(op.f('ix_post_likes_id'), table_name='post_likes')
    op.create_unique_constraint(op.f('post_likes_post_id_user_id_key'), 'post_likes', ['post_id', 'user_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('post_likes', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('post_likes', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('post_likes', 'post_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('post_likes', 'updated_at')
    op.create_foreign_key(op.f('post_comments_parent_comment_id_fkey'), 'post_comments', 'post_comments', ['parent_comment_id'], ['id'])
    op.create_foreign_key(op.f('post_comments_post_id_fkey'), 'post_comments', 'posts', ['post_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('post_comments_user_id_fkey'), 'post_comments', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_post_comments_user_id'), table_name='post_comments')
    op.drop_index(op.f('ix_post_comments_post_id'), table_name='post_comments')
    op.drop_index(op.f('ix_post_comments_parent_comment_id'), table_name='post_comments')
    op.drop_index(op.f('ix_post_comments_id'), table_name='post_comments')
    op.alter_column('post_comments', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('post_comments', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('post_comments', 'edited_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('post_comments', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('post_comments', 'post_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_foreign_key(op.f('payment_methods_user_id_fkey'), 'payment_methods', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_payment_methods_user_id'), table_name='payment_methods')
    op.drop_index(op.f('ix_payment_methods_id'), table_name='payment_methods')
    op.alter_column('payment_methods', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('payment_methods', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('payment_methods', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_foreign_key(op.f('notifications_user_id_fkey'), 'notifications', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('notifications_type_id_fkey'), 'notifications', 'notification_types', ['type_id'], ['id'])
    op.drop_index(op.f('ix_notifications_user_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_type_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_id'), table_name='notifications')
    op.create_index(op.f('idx_notifications_user_id'), 'notifications', ['user_id'], unique=False)
    op.create_index(op.f('idx_notifications_unread'), 'notifications', ['user_id', 'is_read'], unique=False, postgresql_where='(is_read = false)')
    op.alter_column('notifications', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('notifications', 'read_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('notifications', 'data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('notifications', 'type_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('notifications', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('notifications', 'updated_at')
    op.drop_index(op.f('ix_notification_types_id'), table_name='notification_types')
    op.drop_column('notification_types', 'updated_at')
    op.drop_column('notification_types', 'created_at')
    op.create_foreign_key(op.f('guard_pricing_pricing_zone_id_fkey'), 'guard_pricing', 'pricing_zones', ['pricing_zone_id'], ['id'])
    op.create_foreign_key(op.f('guard_pricing_guard_id_fkey'), 'guard_pricing', 'users', ['guard_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('uq_guard_pricing', 'guard_pricing', type_='unique')
    op.drop_index(op.f('ix_guard_pricing_pricing_zone_id'), table_name='guard_pricing')
    op.drop_index(op.f('ix_guard_pricing_id'), table_name='guard_pricing')
    op.drop_index(op.f('ix_guard_pricing_guard_id'), table_name='guard_pricing')
    op.create_unique_constraint(op.f('guard_pricing_guard_id_pricing_zone_id_key'), 'guard_pricing', ['guard_id', 'pricing_zone_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('guard_pricing', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('guard_pricing', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('guard_pricing', 'available_until',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('guard_pricing', 'available_from',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('guard_pricing', 'pricing_zone_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('guard_pricing', 'guard_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index(op.f('ix_event_types_id'), table_name='event_types')
    op.alter_column('event_types', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_column('event_types', 'updated_at')
    op.create_table_comment(
        'complaints',
        'Complaint and dispute resolution system',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('complaints_complainant_id_fkey'), 'complaints', 'users', ['complainant_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('complaints_resolved_by_fkey'), 'complaints', 'users', ['resolved_by'], ['id'])
    op.create_foreign_key(op.f('complaints_defendant_id_fkey'), 'complaints', 'users', ['defendant_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('complaints_category_id_fkey'), 'complaints', 'complaint_categories', ['category_id'], ['id'])
    op.create_foreign_key(op.f('complaints_booking_id_fkey'), 'complaints', 'bookings', ['booking_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_complaints_id'), table_name='complaints')
    op.drop_index(op.f('ix_complaints_defendant_id'), table_name='complaints')
    op.drop_index(op.f('ix_complaints_complaint_reference'), table_name='complaints')
    op.drop_index(op.f('ix_complaints_complainant_id'), table_name='complaints')
    op.drop_index(op.f('ix_complaints_category_id'), table_name='complaints')
    op.drop_index(op.f('ix_complaints_booking_id'), table_name='complaints')
    op.create_unique_constraint(op.f('complaints_complaint_reference_key'), 'complaints', ['complaint_reference'], postgresql_nulls_not_distinct=False)
    op.alter_column('complaints', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('complaints', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('complaints', 'resolved_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('complaints', 'category_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('complaints', 'defendant_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('complaints', 'complainant_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_foreign_key(op.f('complaint_updates_complaint_id_fkey'), 'complaint_updates', 'complaints', ['complaint_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('complaint_updates_user_id_fkey'), 'complaint_updates', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_complaint_updates_user_id'), table_name='complaint_updates')
    op.drop_index(op.f('ix_complaint_updates_id'), table_name='complaint_updates')
    op.drop_index(op.f('ix_complaint_updates_complaint_id'), table_name='complaint_updates')
    op.alter_column('complaint_updates', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('complaint_updates', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('complaint_updates', 'complaint_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('complaint_updates', 'updated_at')
    op.drop_index(op.f('ix_complaint_categories_id'), table_name='complaint_categories')
    op.drop_column('complaint_categories', 'updated_at')
    op.drop_column('complaint_categories', 'created_at')
    op.create_foreign_key(op.f('comment_likes_user_id_fkey'), 'comment_likes', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('comment_likes_comment_id_fkey'), 'comment_likes', 'post_comments', ['comment_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('uq_comment_like', 'comment_likes', type_='unique')
    op.drop_index(op.f('ix_comment_likes_user_id'), table_name='comment_likes')
    op.drop_index(op.f('ix_comment_likes_id'), table_name='comment_likes')
    op.drop_index(op.f('ix_comment_likes_comment_id'), table_name='comment_likes')
    op.create_unique_constraint(op.f('comment_likes_comment_id_user_id_key'), 'comment_likes', ['comment_id', 'user_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('comment_likes', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('comment_likes', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('comment_likes', 'comment_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('comment_likes', 'updated_at')
    op.create_table_comment(
        'bookings',
        'Main booking system for guard assignments',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('bookings_guard_id_fkey'), 'bookings', 'users', ['guard_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('bookings_cancelled_by_fkey'), 'bookings', 'users', ['cancelled_by'], ['id'])
    op.create_foreign_key(op.f('bookings_consumer_id_fkey'), 'bookings', 'users', ['consumer_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('bookings_event_type_id_fkey'), 'bookings', 'event_types', ['event_type_id'], ['id'])
    op.drop_index(op.f('ix_bookings_id'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_guard_id'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_event_type_id'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_consumer_id'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_booking_reference'), table_name='bookings')
    op.create_index(op.f('idx_bookings_status'), 'bookings', ['status'], unique=False)
    op.create_index(op.f('idx_bookings_location'), 'bookings', ['latitude', 'longitude'], unique=False)
    op.create_index(op.f('idx_bookings_guard_id'), 'bookings', ['guard_id'], unique=False)
    op.create_index(op.f('idx_bookings_datetime'), 'bookings', ['start_datetime', 'end_datetime'], unique=False)
    op.create_index(op.f('idx_bookings_consumer_id'), 'bookings', ['consumer_id'], unique=False)
    op.create_unique_constraint(op.f('bookings_booking_reference_key'), 'bookings', ['booking_reference'], postgresql_nulls_not_distinct=False)
    op.alter_column('bookings', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('bookings', 'cancelled_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('bookings', 'completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('bookings', 'started_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('bookings', 'confirmed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('bookings', 'end_datetime',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('bookings', 'start_datetime',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('bookings', 'event_type_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('bookings', 'consumer_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('bookings', 'guard_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('bookings', 'updated_at')
    op.add_column('booking_status_history', sa.Column('changed_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('booking_status_history_changed_by_fkey'), 'booking_status_history', 'users', ['changed_by'], ['id'])
    op.create_foreign_key(op.f('booking_status_history_booking_id_fkey'), 'booking_status_history', 'bookings', ['booking_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_booking_status_history_id'), table_name='booking_status_history')
    op.drop_index(op.f('ix_booking_status_history_booking_id'), table_name='booking_status_history')
    op.alter_column('booking_status_history', 'booking_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('booking_status_history', 'updated_at')
    op.drop_column('booking_status_history', 'created_at')
    op.create_foreign_key(op.f('background_checks_user_id_fkey'), 'background_checks', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_background_checks_user_id'), table_name='background_checks')
    op.drop_index(op.f('ix_background_checks_id'), table_name='background_checks')
    op.alter_column('background_checks', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('background_checks', 'completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('background_checks', 'initiated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('background_checks', 'result_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('background_checks', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('background_checks', 'updated_at')
    op.drop_column('background_checks', 'created_at')
    op.create_foreign_key(op.f('app_settings_updated_by_fkey'), 'app_settings', 'users', ['updated_by'], ['id'])
    op.drop_index(op.f('ix_app_settings_setting_key'), table_name='app_settings')
    op.drop_index(op.f('ix_app_settings_id'), table_name='app_settings')
    op.create_unique_constraint(op.f('app_settings_setting_key_key'), 'app_settings', ['setting_key'], postgresql_nulls_not_distinct=False)
    op.alter_column('app_settings', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_column('app_settings', 'created_at')
    # ### end Alembic commands ###
